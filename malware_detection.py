# -*- coding: utf-8 -*-
"""microsoft.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d5pl2lx4YCxDzNXP5QSDUuuszQL_GkMa
"""

import pandas as pd
import numpy as np
import gc

dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }

# Run this cell to mount your Google Drive.
from google.colab import drive
drive.mount('/content/drive')

malware_data = pd.read_csv("drive/My Drive/train.csv",dtype=dtypes, low_memory=True)

malware_data.head(1)

remove_cols = ['PuaMode', 'Census_ProcessorClass', 'Census_IsWIMBootEnabled', 'IsBeta', 'Census_IsFlightsDisabled', 'Census_IsFlightingInternal', 'AutoSampleOptIn', 'Census_ThresholdOptIn', 'SMode', 'Census_IsPortableOperatingSystem', 'Census_DeviceFamily', 'UacLuaenable', 'Census_IsVirtualDevice', 'Platform', 'Census_OSSkuName', 'Census_OSInstallLanguageIdentifier', 'Processor']
malware_data.drop(remove_cols, axis=1, inplace=True)

malware_data.DefaultBrowsersIdentifier.fillna(0, inplace=True)

import numpy as np
trans_dict = {
    'off': 'Off', '&#x02;': '2', '&#x01;': '1', 'on': 'On', 'requireadmin': 'RequireAdmin', 'OFF': 'Off', 
    'Promt': 'Prompt', 'requireAdmin': 'RequireAdmin', 'prompt': 'Prompt', 'warn': 'Warn', 
    '00000000': '0', '&#x03;': '3', np.nan: 'NoExist'
}
malware_data.replace({'SmartScreen': trans_dict}, inplace=True)

malware_data.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)

pd.options.display.max_rows = 99
malware_data.Census_InternalBatteryType.value_counts()

trans_dict = {
    '˙˙˙': 'unknown', 'unkn': 'unknown', np.nan: 'unknown'
}
malware_data.replace({'Census_InternalBatteryType': trans_dict}, inplace=True)

malware_data.dropna(inplace=True)
malware_data.shape

malware_data.drop('MachineIdentifier',axis=1,inplace=True)

lis=malware_data.EngineVersion.unique()

EngineVersion_dic={}

for i in range(len(lis)):
  EngineVersion_dic.update({lis[i]:i})
malware_data.EngineVersion=malware_data.EngineVersion.map(EngineVersion_dic)

lis=malware_data.AppVersion.unique()
AppVersion_dic={}
for i in range(len(lis)):
  AppVersion_dic.update({lis[i]:i})
malware_data.AppVersion=malware_data.AppVersion.map(AppVersion_dic)

ProductNam_dic={'win8defender':0,'mse':1,'mseprerelease':2,'scep':3}
malware_data.ProductName=malware_data.ProductName.map(ProductNam_dic)

lis=malware_data.AvSigVersion.unique()
AvSigVersion_dic={}
for i in range(len(lis)):
  AvSigVersion_dic.update({lis[i]:i})
malware_data.AvSigVersion=malware_data.AvSigVersion.map(AvSigVersion_dic)

lis=malware_data.OsVer.unique()
OsVer_dic={}
for i in range(len(lis)):
  OsVer_dic.update({lis[i]:i})
malware_data.OsVer=malware_data.OsVer.map(OsVer_dic)

lis=malware_data.OsPlatformSubRelease.unique()
OsPlatformSubRelease_dic={}
for i in range(len(lis)):
  OsPlatformSubRelease_dic.update({lis[i]:i})
malware_data.OsPlatformSubRelease=malware_data.OsPlatformSubRelease.map(OsPlatformSubRelease_dic)

lis=malware_data.OsBuildLab.unique()
OsBuildLab_dic={}
for i in range(len(lis)):
  OsBuildLab_dic.update({lis[i]:i})
malware_data.OsBuildLab	=malware_data.OsBuildLab.map(OsBuildLab_dic)

lis=malware_data.SkuEdition.unique()
SkuEdition_dic={}
for i in range(len(lis)):
  SkuEdition_dic.update({lis[i]:i})
malware_data.SkuEdition	=malware_data.SkuEdition.map(SkuEdition_dic)

lis=malware_data.SmartScreen.unique()
SmartScreen_dic={}
for i in range(len(lis)):
  SmartScreen_dic.update({lis[i]:i})
malware_data.SmartScreen	=malware_data.SmartScreen.map(SmartScreen_dic)

lis=malware_data.Census_MDC2FormFactor.unique()
Census_MDC2FormFactor_dic={}
for i in range(len(lis)):
  Census_MDC2FormFactor_dic.update({lis[i]:i})
malware_data.Census_MDC2FormFactor	=malware_data.Census_MDC2FormFactor.map(Census_MDC2FormFactor_dic)

lis=malware_data.Census_PrimaryDiskTypeName.unique()
Census_PrimaryDiskTypeName_dic={}
for i in range(len(lis)):
  Census_PrimaryDiskTypeName_dic.update({lis[i]:i})
malware_data.Census_PrimaryDiskTypeName	=malware_data.Census_PrimaryDiskTypeName.map(Census_PrimaryDiskTypeName_dic)

lis=malware_data.Census_ChassisTypeName.unique()
Census_ChassisTypeName_dic={}
for i in range(len(lis)):
  Census_ChassisTypeName_dic.update({lis[i]:i})
malware_data.Census_ChassisTypeName	=malware_data.Census_ChassisTypeName.map(Census_ChassisTypeName_dic)

lis=malware_data.Census_PowerPlatformRoleName.unique()
Census_PowerPlatformRoleName_dic={}
for i in range(len(lis)):
  Census_PowerPlatformRoleName_dic.update({lis[i]:i})
malware_data.Census_PowerPlatformRoleName	=malware_data.Census_PowerPlatformRoleName.map(Census_PowerPlatformRoleName_dic)

lis=malware_data.Census_InternalBatteryType.unique()
Census_InternalBatteryType_dic={}
for i in range(len(lis)):
  Census_InternalBatteryType_dic.update({lis[i]:i})
malware_data.Census_InternalBatteryType	=malware_data.Census_InternalBatteryType.map(Census_InternalBatteryType_dic)

lis=malware_data.Census_OSVersion.unique()
Census_OSVersion_dic={}
for i in range(len(lis)):
  Census_OSVersion_dic.update({lis[i]:i})
malware_data.Census_OSVersion	=malware_data.Census_OSVersion.map(Census_OSVersion_dic)

lis=malware_data.Census_OSArchitecture.unique()
Census_OSArchitecture_dic={}
for i in range(len(lis)):
  Census_OSArchitecture_dic.update({lis[i]:i})
malware_data.Census_OSArchitecture	=malware_data.Census_OSArchitecture.map(Census_OSArchitecture_dic)

lis=malware_data.Census_OSBranch.unique()
Census_OSBranch_dic={}
for i in range(len(lis)):
  Census_OSBranch_dic.update({lis[i]:i})
malware_data.Census_OSBranch	=malware_data.Census_OSBranch.map(Census_OSBranch_dic)

lis=malware_data.Census_OSEdition.unique()
Census_OSEdition_dic={}
for i in range(len(lis)):
  Census_OSEdition_dic.update({lis[i]:i})
malware_data.Census_OSEdition	=malware_data.Census_OSEdition.map(Census_OSEdition_dic)

lis=malware_data.Census_OSInstallTypeName.unique()
Census_OSInstallTypeName_dic={}
for i in range(len(lis)):
  Census_OSInstallTypeName_dic.update({lis[i]:i})
malware_data.Census_OSInstallTypeName	=malware_data.Census_OSInstallTypeName.map(Census_OSInstallTypeName_dic)

lis=malware_data.Census_OSWUAutoUpdateOptionsName.unique()
Census_OSWUAutoUpdateOptionsName_dic={}
for i in range(len(lis)):
  Census_OSWUAutoUpdateOptionsName_dic.update({lis[i]:i})
malware_data.Census_OSWUAutoUpdateOptionsName	=malware_data.Census_OSWUAutoUpdateOptionsName.map(Census_OSWUAutoUpdateOptionsName_dic)

lis=malware_data.Census_GenuineStateName.unique()
Census_GenuineStateName_dic={}
for i in range(len(lis)):
  Census_GenuineStateName_dic.update({lis[i]:i})
malware_data.Census_GenuineStateName	=malware_data.Census_GenuineStateName.map(Census_GenuineStateName_dic)

lis=malware_data.Census_ActivationChannel.unique()
Census_ActivationChannel_dic={}
for i in range(len(lis)):
  Census_ActivationChannel_dic.update({lis[i]:i})
malware_data.Census_ActivationChannel	=malware_data.Census_ActivationChannel.map(Census_ActivationChannel_dic)

lis=malware_data.Census_FlightRing.unique()
Census_FlightRing_dic={}
for i in range(len(lis)):
  Census_FlightRing_dic.update({lis[i]:i})
malware_data.Census_FlightRing	=malware_data.Census_FlightRing.map(Census_FlightRing_dic)

malware_data.drop_duplicates(inplace=True)

len(malware_data)

y=malware_data.loc[:,'HasDetections']

type(y)

malware_data.drop('HasDetections',axis=1,inplace=True)

malware_data.head(1)

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(malware_data,y, test_size = 0.2, random_state = 0)

len(xtrain)

import tensorflow as tf

model=tf.keras.models.Sequential()
#define input layer of neural network
model.add(tf.keras.layers.Flatten())
#define 1st hidden layer
model.add(tf.keras.layers.Dense(256,activation=tf.nn.relu))
#define 2nd hidden layer
model.add(tf.keras.layers.Dense(128,activation=tf.nn.relu))
#define output layer
model.add(tf.keras.layers.Dense(1,activation=tf.nn.sigmoid))

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

xtrain=tf.keras.utils.normalize(xtrain)
xtest=tf.keras.utils.normalize(xtest)

xtrain=xtrain.values

ytrain=ytrain.values

xtest=xtest.values
ytest=ytest.values

model.fit(xtrain,ytrain,epochs=25)

ypred=model.predict(xtest)

ypred[5]

ytest[5]

from tqdm import tqdm

c=0
for i in tqdm(range(len(xtest))):
  if(ypred[i]!=ytest[i]):
    c=c+1
print(c)

c

